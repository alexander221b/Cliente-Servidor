ejemplo de uso:

servidor:

./matrix_thread_server

worker:

./matrix_thread_worker // el id se genera automaticamente

cliente:

./matrix_thread_client diego '1,1,1,1;2,2,2,2;3,3,3,3;4,4,4,4;' '1,1,1,1;2,2,2,2;3,3,3,3;4,4,4,4;' // 
- se requiere id ingresado por el usuario
- las columnas se separan por (,) y las filas por (;), todo dentro de ('')
- por el momento solo acepta matrices que contiene en cada casilla un dígito
- se debe tener en cuenta los requisitos para la multiplicación entre matrices, que el número de columnas de la primera matriz sea igual a las filas de la segunda matriz

solución con hilos:

el cliente manda la matriz en char* al servidor, el cual escoge aleatoriamente un worker de su lista de registrados, al cual manda la matriz todavía en char*, el worker convierte la matriz de char* a una matriz de enteros. Despúes se le pasa a la función multiply encargada de multiplicar matrices, la primera fila de la matriz 1 y la matriz 2 completa, después la fila 2 de la matriz 1 y la matriz 2 completa, continua así hasta terminar las filas de la matriz 1. La función multiply va almacenando cada fila resultante de cada operación descrita anteriormente en una matriz final. Cada iteración, osea, cada vez que se le pasa una fila de la matriz 1 y la matriz 2 completa a multiply se crea un hilo, permitiendo que se solucione toda la matriz a la vez, en lugar de tener que esperar a que se encuentre primero la fila 1 para hallar la 2 y así sucesivamente. 
